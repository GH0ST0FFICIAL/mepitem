//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class mepbddbEntities : DbContext
{
    public mepbddbEntities()
        : base("name=mepbddbEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<tblCompanyDetail> tblCompanyDetails { get; set; }
    public virtual DbSet<tblCompanyType> tblCompanyTypes { get; set; }
    public virtual DbSet<tblItem> tblItems { get; set; }
    public virtual DbSet<tblOffer> tblOffers { get; set; }
    public virtual DbSet<tblPost> tblPosts { get; set; }
    public virtual DbSet<tblRole> tblRoles { get; set; }
    public virtual DbSet<tblSubItem> tblSubItems { get; set; }
    public virtual DbSet<tblSubSystem> tblSubSystems { get; set; }
    public virtual DbSet<tblSystem> tblSystems { get; set; }
    public virtual DbSet<tblTag> tblTags { get; set; }
    public virtual DbSet<tblUserAccount> tblUserAccounts { get; set; }
    public virtual DbSet<tblOfferNotification> tblOfferNotifications { get; set; }
    public virtual DbSet<tblPostNotification> tblPostNotifications { get; set; }

    public virtual ObjectResult<string> spGetBrandName(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetBrandName", termParameter);
    }

    public virtual ObjectResult<string> spGetItemTitle(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetItemTitle", termParameter);
    }

    public virtual ObjectResult<string> spGetMaxCapacity(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMaxCapacity", termParameter);
    }

    public virtual ObjectResult<string> spGetMinCapacity(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMinCapacity", termParameter);
    }

    public virtual ObjectResult<string> spGetSubItemTitle(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSubItemTitle", termParameter);
    }

    public virtual ObjectResult<string> spGetSubSystemTitle(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSubSystemTitle", termParameter);
    }

    public virtual ObjectResult<string> spGetSystemTitle(string term)
    {
        var termParameter = term != null ?
            new ObjectParameter("term", term) :
            new ObjectParameter("term", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSystemTitle", termParameter);
    }
}
